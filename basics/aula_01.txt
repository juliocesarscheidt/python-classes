

# computador entende binario
0         0000
1         0001
2         0010
3         0011
4         0100
5         0101
6         0110
7         0111
8         1000
9         1001
10        1010
11        1011
12        1100
13        1101
14        1110
15        1111



# linguagens interpretadas
  Linguagem interpretada é uma linguagem de programação em que o código fonte é executado por um programa de computador chamado interpretador (ao invés de serem compiladas), onde a interpretação e a execução do programa acontecem em tempo real e independente do sistema operacional utilizado.

  Geralmente possuem um REPL (read eval print loop)

  Exemplos: javascript, python, php, ruby, shellscript

# linguagens compiladas
  Linguagem compilada é uma linguagem de programação em que o código fonte, nessa linguagem, é executado diretamente pelo sistema operacional ou pelo processador (ou alguma máquina virtual, ex. JVM do Java), após ser traduzido por meio de um processo chamado compilação, usando um programa de computador chamado compilador, para uma linguagem de baixo nível, como linguagem de montagem (assembly) ou código de máquina
  
  Exemplos: java, csharp, c, c++, golang, rust



# paradigmas
Orientação a objeto
  Modela o programa em termos de objetos, que são instâncias de classes que encapsulam dados/atributos e comportamentos/metodos
  Exemplos: csharp, java, c++, typescript
  Outras linguagens como python, php, javascript, incorporam alguns conceitos da POO

Procedural
  Organiza o programa como uma sequência de procedimentos ou rotinas.
  Exemplos: fortran, c

Funcional
  Baseia-se no conceito de funções matemáticas, evitando estados mutáveis e dados globais.
  Exemplos: haskell, lisp, scala
  Outras linguagens incorporam conceitos funcionais, como javascript, python, e até java nas versões mais atuais

Orientado a Eventos
  O programa responde a eventos gerados pelo sistema ou usuário
  Exemplos: javascript, visual basic



# base das linguagens
variaveis
  sao armazenadas em memória, e então recuperadas quando acessadas
  possuem endereço na memória
  - algumas linguagens possuem também constantes

funções/metodos - procedimentos
  encapsulam lógicas, trechos, sequencias de instruções em algo que pode ser reutilizado posteriormente



# tipos primitivos

# string
nome = "julio"
print(nome)
print(type(nome))

# int
numero = 1
print(type(numero))

# float
flutuante = 1.50
print(type(flutuante))

# bool
booleano = True
print(type(booleano))



# tipos complexos

# lista/vetor
# lista = [1, 2]
lista = list(1, 2)
print(lista)
print(type(lista))

matriz = [[1, 2], [3, 4]]
print(type(matriz))

# dicionario/mapa - armazena chave e valor
# dicionario = {"chave_1": "valor_1"}
dicionario = dict()
dicionario["chave_2"]  = "valor_2"
print(type(dicionario))

# conjunto - armazena valores unicos, inordenado
conjunto = {'a', 'b', 'c', 'd'}
# conjunto = set(['a', 'b', 'c', 'd'])
print(conjunto)

# tupla - imutavel, nao pode ser alterada
# tupla_simples = 0, 1, 2
tupla_simples = (0, 1, 2)
tupla_simples = tuple()

print(tupla_simples)
print(type(tupla_simples))

tupla_um_elemento = (0,)
print(tupla_um_elemento)
print(type(tupla_um_elemento))













